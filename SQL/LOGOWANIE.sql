/*CREATE TABLE Konta(
    id_Konta NUMBER PRIMARY KEY,
    login NVARCHAR2(30) UNIQUE,
    haslo NVARCHAR2(32),
    typ_konta NVARCHAR2(10),
    Osoba_Nr NUMBER,
    CONSTRAINT check_account_type CHECK( typ_konta IN('admin', 'lekarz', 'pacjent')),
    CONSTRAINT Osoba_fk_Konta FOREIGN KEY(Osoba_Nr) REFERENCES Osoby(Nr_Osoby)
);


CREATE TABLE Sesje(
    Id_Sesji NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    token NVARCHAR2(16) UNIQUE NOT NULL,
    EXPR DATE DEFAULT SYSDATE+1 NOT NULL,
    Osoba_Nr NUMBER,
    CONSTRAINT Osoba_fk_Sesje FOREIGN KEY(Osoba_Nr) REFERENCES Osoby(Nr_Osoby)
);
*/
INSERT INTO Konta VALUES(1, 'PACJENT1', 'HASLOP1', 'pacjent', 1);
INSERT INTO Sesje (token, Osoba_Nr) VALUES ('ABCD', 2);


INSERT INTO Konta VALUES(2, 'admin', 'qwerty', 'admin', 2);
SELECT Sesje.token, Konta.typ_konta, Sesje.Osoba_Nr from Sesje
INNER JOIN osoby on osoby.nr_osoby = sesje.osoba_nr
INNER JOIN Konta on osoby.nr_osoby = konta.osoba_nr
WHERE konta.typ_konta='pacjent' and sesje.token='abc';

CREATE OR REPLACE PROCEDURE add_session(p_token Sesje.token%TYPE, p_osoba Sesje.osoba_nr%TYPE)
IS
BEGIN
    INSERT INTO Sesje (token, Osoba_Nr) VALUES (p_token, p_osoba);
END;
/

/*W trakcie prac
CREATE OR REPLACE FUNCTION Uwierzytelnianie (p_login IN Konta.login%TYPE, p_haslo IN Konta.haslo%TYPE) RETURN sesje.token%TYPE
IS
    token sesje.token%TYPE;
    gen_token sesje.token%TYPE;
    osoba_id osoby.nr_osoby%TYPE;
    count_ac NUMERIC;

BEGIN

    SELECT COUNT(id_konta) INTO count_ac FROM Konta WHERE login=p_login and haslo=p_haslo;

    IF count_ac <= 0 THEN
        token:='error';
        RETURN token;
    END IF;
    
    gen_token := dbms_random.string('L', 15);
    SELECT Osoba_Nr INTO osoba_id FROM KONTA WHERE login=p_login and haslo=p_haslo;
    return gen_token;

END;
/
SELECT Uwierzytelnianie('PACJENT1', 'HASLOP1') FROM DUAL;*/